"""在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。
除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于
一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。
计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。
示例 1:
输入: [3,2,3,null,3,null,1]
     3
    / \
   2   3
    \   \
     3   1
输出: 7
解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.
示例 2:
输入: [3,4,5,1,3,null,1]
     3
    / \
   4   5
  / \   \
 1   3   1
输出: 9
解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9."""
"""求本节点+孙子更深节点vs儿子节点+重孙更深的节点的比较。  虽然递归是自顶向下的，
但是因为是不断的return，所以真正求值是从底向上的。用到了一个有两个元素的列表，分别保存了之前层的，不取节点和取节点的情况。
然后遍历左右子树，求出当前节点取和不取能得到的值，再返回给上一层。注意这个里面的robcurr是当前节点能达到的最大值，所以
最后返回结果的时候试试返回的root节点robcurr的值。"""


class Solution(object):

    def rob(self, root):
        def dfs(root):              # 自顶向下（实质：不断return，自底向下返回）
            if not root: return [0, 0]      # 下一层返回给上一层的：no robcurr不取节点， robcurr可取节点的最大值(包括不抢的情况）
            robleft = dfs(root.left)
            robright = dfs(root.right)
            norobcurr = robleft[1] + robright[1]    # 这层不抢，就可抢它的左右子树
            robcurr = max(root.val + robleft[0] + robright[0], norobcurr)   # 当前节点能达到的最大值
            return [norobcurr, robcurr]     # 注意这个里面的robcurr是当前节点能达到的最大值

        return dfs(root)[1]
