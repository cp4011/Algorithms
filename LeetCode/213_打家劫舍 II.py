"""你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和
最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
示例 1:
输入: [2,3,2]
输出: 3
解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
示例 2:
输入: [1,2,3,1]
输出: 4
解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。
"""


class Solution:
    def rob(self, nums):        # 相邻房间不能一起偷，且首尾是紧挨着的

        def rob_1(nums):        # 相邻房间不能一起偷
            if not nums:
                return 0
            n = len(nums)
            if n <= 2:
                return max(nums)
            dp = [0] * n
            dp[0], dp[1] = nums[0], max(nums[0], nums[1])   # 注意dp[1]不是等于nums[1]
            for i in range(2, n):
                dp[i] = max(dp[i-1], dp[i-2] + nums[i])
            return dp[-1]

        if len(nums) == 1:      # 注意要有此判断，不然输入[2]时，输出为0
            return nums[0]
        return max(rob_1(nums[:-1]), rob_1(nums[1:]))   # 要么偷第一家（不偷最后一家），要么偷最后一家（不偷第一家）
