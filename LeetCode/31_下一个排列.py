"""实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。
如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。必须原地修改，只允许使用额外常数空间。
以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1
"""

''' 1. 从右侧开始遍历，找到第一对两个连续的数字满足nums[k] < nums[k+1],即找出最大的索引 k 满足 【升序】，如果不存在，就翻转整个数组；
    2. 再找出另一个最大索引 l 满足 nums[l] > nums[k]；
    3. 交换 nums[l] 和 nums[k]；
    4. 最后翻转 nums[k+1:]。
举个例子：   比如 nums = [1,2,7,4,3,1]，下一个排列是什么？
                我们找到第一个最大索引是 nums[1] = 2；     再找到第二个最大索引是 nums[5] = 3
                交换，nums = [1,3,7,4,2,1];                翻转，nums = [1,3,1,2,4,7]  完毕!
'''
class Solution:
    def nextPermutation(self, nums):            # 时间复杂度：O(n) 最坏只需扫描两次数组  空间复杂度：O(1)
        """ 不用返回任何东西，必须原地修改"""
        i = j = len(nums) - 1
        while i > 0 and nums[i - 1] >= nums[i]:
            i -= 1
        if i == 0:                              # 数组全部降序排列，反转数组即可
            nums.reverse()
            return
        k = i - 1                               # 找到最右侧第一个升序位置k
        while nums[j] <= nums[k]:
            j -= 1
        nums[k], nums[j] = nums[j], nums[k]
        l, r = k + 1, len(nums) - 1             # 反转后面部分
        while l < r:                            # 原地修改，而切片过程是切下列表的一部分，创建新的列表，将切下的部分复制到新列表
            nums[l], nums[r] = nums[r], nums[l]
            l += 1
            r -= 1
