"""给你六种面额 1、5、10、20、50、100 元的纸币，假设每种币值的数量都足够多，编写程序求组成N元（N为0~10000的非负整数）的
不同组合的个数。
输入描述:
输入包括一个整数n(1 ≤ n ≤ 10000)
输出描述:
输出一个整数,表示不同的组合方案数
输入例子1:      1
输出例子1:      1
"""

'''         0   1   2   3   4   5   6   7   8   9   10  11.....          要组成N元

            1   1   1   1   1   1   1   1   1   1   1   1               coins[0] = 1
            1   1   1   1   1  [2]  2   2   2   2  [3]  3               coins[1] = 5
            1   1   1   1   1   2   2   2   2   2  [4]  4               coins[2] = 10
使用前(i+1)种钱币表示总面额为j的方案数 = 使用前 i 种钱币表示总面额为j的方案数 + 使用前(i+1)种钱币表示的总面额为(j-coins[i])的方案数
'''
# 动态规划（不用矩阵存储，只用一行数组存储）
n = int(input())
nums = [0] * (n+1)                  # n+1 个
coins = [1, 5, 10, 20, 50, 100]
nums[0] = 1                         # 动态规划初始条件【边界】
for coin in coins:                  # 遍历每种纸币
    for j in range(coin, n+1):      # 【注意边界是n+1】要遍历到下标为 n 结束
        nums[j] = nums[j] + nums[j-coin]
print(nums[n])
