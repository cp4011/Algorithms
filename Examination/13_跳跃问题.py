"""机器人正在玩一个古老的基于DOS的游戏。游戏中有N+1座建筑——从0到N编号，从左到右排列。编号为0的建筑高度为0个单位，编号为i
的建筑的高度为H(i)个单位。
起初， 机器人在编号为0的建筑处。每一步，它跳到下一个（右边）建筑。假设机器人在第k个建筑，且它现在的能量值是E, 下一步它将
跳到第个k+1建筑。它将会得到或者失去正比于与H(k+1)与E之差的能量。如果 H(k+1) > E 那么机器人就失去 H(k+1) - E 的能量值，
否则它将得到 E - H(k+1) 的能量值。
游戏目标是到达第个N建筑，在这个过程中，能量值不能为负数个单位。现在的问题是机器人以多少能量值开始游戏，才可以保证成功完成游戏？

输入描述:
第一行输入，表示一共有 N 组数据.
第二个是 N 个空格分隔的整数，H1, H2, H3, ..., Hn 代表建筑物的高度
输出描述:
输出一个单独的数表示完成游戏所需的最少单位的初始能量

输入例子1:
5
3 4 3 2 4
输出例子1:
4

输入例子2:
3
4 4 4
输出例子2:
4

输入例子3:
3
1 6 4
输出例子3:
3
"""


def bin_search():
    def check(E):
        for i in range(N):
            if E < M[i]:
                E -= M[i] - E
            else:
                E += E - M[i]
            if E < 0:
                return False
        return True
    L = min(M)
    R = max(M)
    while L < R:                # 二分查找【答案肯定在最大数与最小数之间】L = R时 结束循环
        mid = (L + R) // 2
        if check(mid):          # 满足题意要求（但为了找到最小的），R还要继续左移，直到 L=R 时，结束循环，此时的L和R是最小的初始能量
            R = mid             # 不能 -1，会越过 可行解，让L和R之间没有解
        else:
            L = mid + 1
    print(L)                    # 此时 L = R


N = int(input())
M = list(map(int, input().split(' ')))
bin_search()
